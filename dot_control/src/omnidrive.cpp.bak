#include "ros/ros.h"
#include "std_msgs/Float64.h"
#include "geometry_msgs/Twist.h"
#include <cmath>
#include <iostream>
#define PI 3.14159

// Equations are taken from this repo -> https://github.com/GuiRitter/OpenBase
double vx = 0, vy = 0, wp = 0, L = 0.04;

void velocity_callback(const geometry_msgs::Twist& msg){
    double Vx = msg.linear.x;
    double Vy = msg.linear.y;
    double s = sin(-PI/3);
    double c = cos(-PI/3);
    vx = Vx;//*c + Vy*s;
    vy = Vy;//*s - Vy*c;
    wp = msg.angular.z;
}

int main(int argc, char** argv){
    ros::init(argc, argv, "omnidrive");
    ros::NodeHandle n;

namespace omnidrive{
  //instantiate various variables
  drive::drive(ros::NodeHandle& nodeHandle):n(nodeHandle){
    left_pub = n.advertise<std_msgs::Float64>("dot/left_joint_position_controller/command", 1000);
    right_pub = n.advertise<std_msgs::Float64>("dot/right_joint_position_controller/command", 1000);
    back_pub = n.advertise<std_msgs::Float64>("dot/back_joint_position_controller/command", 1000);
    vel_sub = n.subscribe("/cmd_vel", 1000,  &drive::velocity_callback,this);
    map_sub = n.subscribe("/gazebo_map/map", 1000,  &drive::updateOdom,this);
    pub_ = n.advertise<nav_msgs::Odometry>("dot/odom", 50) ;

    ros::Subscriber vel_sub = n.subscribe("/cmd_vel", 1000, velocity_callback);
    
    double dt_ = 1.0/100.0;


    ros::Rate rate(1.0/dt_);

    std_msgs::Float64 lpos, rpos, bpos;
    lpos.data = 0;
    rpos.data = 0;
    bpos.data = 0;
    vx = 0; vy = 0; wp = 0;
    odom_theta=0;odom_x=0;odom_y=0;
    tfListenerObj=new tf2_ros::TransformListener(tfBuffer);
    //ROS_INFO_STREAM_THROTTLE(2.0,"Successfully set up ros omni drive");
  }
  //set the current velocity as stated in /cmd_vel
  void drive::velocity_callback(const geometry_msgs::Twist& msg){
    //ROS_INFO_STREAM_THROTTLE(2.0,"Got new velocities from cmd_vel");
      vx = msg.linear.x;
      vy = msg.linear.y;
      wp = msg.angular.z;
  }
  //publish velocity as was stated in the /cmd_vel
  void drive::publishVel(){
    //convert velocity from world frame to m frame
    //get transform from map to base_link using tf to get theta
    double vmx,vmy;
    geometry_msgs::TransformStamped transformStamped;
    try {
      transformStamped = tfBuffer.lookupTransform("base_link","map", ros::Time(0));
      geometry_msgs::Quaternion q=transformStamped.transform.rotation;

      double yaw = atan2(2.0*(q.y*q.z + q.w*q.x), q.w*q.w - q.x*q.x - q.y*q.y + q.z*q.z);
      vmx=cos(yaw)*vx+sin(yaw)*vy;
      vmy=-sin(yaw)*vx+cos(yaw)*vy;
      ROS_INFO_STREAM_THROTTLE(2.0,"Velocity Pulish vmx "<<vmx<<" vmy "<<vmy<<" odom_y "<<odom_y<<" odom_theta "<<odom_theta<<" Yaw "<<yaw);
    } catch (tf2::TransformException &exception) {
      ROS_WARN("%s", exception.what());
      //ros::Duration(1.0).sleep();
      //vmx=vx;vmy=vy;
      publishOdom();
      return;
    }
    //convert velocity from m frame to velocity of wheels
    double v1, v2, v3;
    v1 = (L * wp - (vmx / 2) - (sqrt3by2 * vmy));
    v2 = vmx + L * wp;
    v3 = L * wp - (vmx / 2) + (sqrt3by2 * vmy);

    //ros::Time timeCurrent = ros::Time::now();
    //double duration = (timeCurrent - timePrevious).toNSec()/1e9;
    float duration=0.1;
    ROS_INFO_STREAM_THROTTLE(2.0,"v1 "<<v1<<" v2 "<<v2<<" v3 "<<v3<<" duration "<<duration);

    lpos.data += v1*duration/r;
    bpos.data += v2*duration/r;
    rpos.data += v3*duration/r;

        lpos.data += 2*PI*v1*dt_;
        bpos.data += 2*PI*v2*dt_;
        rpos.data += 2*PI*v3*dt_;

    publishOdom();
    //timePrevious = timeCurrent;
  }

  //update the current odom values whenever map is upadted
  //might never be used
  void drive::updateOdom(const nav_msgs::Odometry& msg){
    //set the current theta to zero
    odom_theta=0;odom_x=0;odom_y=0;
    //ROS_INFO_STREAM_THROTTLE(2.0,"Updated Odom");
  }

  //publish the odom of the bot, i.e. current location w.r.t map
  void drive::publishOdom(){
    //based on velocity add values to theta , x , y,z and send to transform and publish odom
    //ros::Time timeCurrent = ros::Time::now();
    //double duration = (timeCurrent - timePrevious).toNSec()/1e9;
    float duration=0.1;
    odom_x += vx * duration;
    odom_y += vy * duration;
    odom_theta += wp * duration;
    ROS_INFO_STREAM_THROTTLE(2.0,"Odom Publish duration "<<duration<<" odom_x "<<odom_x<<" odom_y "<<odom_y<<" odom_theta "<<odom_theta);
    //transfrom using tf
//    //saving model variables
//    tf::Quaternion tf_quat;
//    tf_quat.setRPY(0, 0, odom_theta);
//    //tranform odom
//    geometry_msgs::TransformStamped odom_trans;
//    odom_trans.transform.translation.x = odom_x ;
//    odom_trans.transform.translation.y = odom_y ;
//    odom_trans.transform.translation.z = 0 ;
//
//    geometry_msgs::Quaternion geo_Quat ;
//    tf::quaternionTFToMsg(tf_quat, geo_Quat) ;
//    odom_trans.transform.rotation = geo_Quat ;
//    odom_trans.header.stamp = ros::Time::now() ;
//    odom_trans.header.frame_id = "odom" ;
//    odom_trans.child_frame_id = "base_link" ;
//
//    //send the transform
//    odom_broadcaster.sendTransform(odom_trans);

    //transform using tf2
    static tf2_ros::TransformBroadcaster br;
    geometry_msgs::TransformStamped odom_trans;

    tf2::Quaternion tf_quat;
    tf_quat.setRPY(0, 0, odom_theta);

    odom_trans.header.stamp = ros::Time::now();
    odom_trans.header.frame_id = "odom";
    odom_trans.child_frame_id = "origin_link";
    odom_trans.transform.translation.x =odom_x;
    odom_trans.transform.translation.y =odom_y;
    odom_trans.transform.translation.z =0;

    geometry_msgs::Quaternion geo_Quat ;
    geo_Quat=tf2::toMsg(tf_quat);
    odom_trans.transform.rotation = geo_Quat ;

    br.sendTransform(odom_trans);

    //publish odometry over ros
    nav_msgs::Odometry odom ;
    odom.header.stamp = odom_trans.header.stamp ;
    odom.header.frame_id = "odom" ;

    //set the position
    odom.pose.pose.position.x = odom_trans.transform.translation.x ;
    odom.pose.pose.position.y = odom_trans.transform.translation.y ;
    odom.pose.pose.position.z = odom_trans.transform.translation.z ;
    odom.pose.pose.orientation = geo_Quat ;

    //set the velocity
    odom.child_frame_id = "origin_link";
    odom.twist.twist.linear.x = vx ;
    odom.twist.twist.linear.y = vy ;
    odom.twist.twist.linear.z = 0 ;

    odom.twist.twist.angular.x= 0 ;
    odom.twist.twist.angular.y= 0 ;
    odom.twist.twist.angular.z= wp ;
//
//    //publish the message
    pub_.publish(odom);
  }
  drive::~drive(){
  }
}
